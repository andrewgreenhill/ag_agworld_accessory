{"version":3,"sources":["utils/reportWebVitals.js","views/LoginScreen.js","components/TopBar.js","components/MenuBar.js","components/FarmsAndFields.js","utils/GetWeatherData.js","utils/TimeConvert.js","components/WeatherObservations.js","views/WeatherPage.js","views/Main.js","views/LoadDataIntoApp.js","utils/GetAgworldData.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","LoginScreen","props","title","setUserId","userName","setUserName","setThumbURL","useState","plainTextPassword","setPassword","className","src","htmlFor","type","name","value","onChange","event","target","required","onClick","fetch","method","response","json","userJSON","randomUserName","results","console","error","toLowerCase","first","last","picture","thumbnail","userID","parseInt","id","catch","href","TopBar","companyName","thumbURL","MenuBar","setCurrentPage","FarmsAndFields","farms","fields","setWeatherForField","farmExpanded","setFarmExpanded","farmFields","fieldId","Object","keys","forEach","farmId","attributes","farm_id","push","updateFarmExpanded","setFarmExpandedNew","undefined","farmsElements","farmAndFields","farm","toggleFarmExpansion","description","fieldList","map","field","length","weatherStationData","station","ca_proxy","headers","Accept","formatBOMtime","bomTime","slice","WeatherObservations","gotWeatherForStation","setGotWeatherForStation","stationName","setStationName","observTime","setObservTime","windSpeed","setWindSpeed","windDirection","setWindDirection","deltaT","setDeltaT","temperature","setTemperature","windGustSpeed","setWindGustSpeed","humidity","setHumidity","weatherConds","setWeatherConds","weatherStation","weatherJSON","observation","observations","data","Date","local_date_time_full","wind_spd_kmh","wind_dir","delta_t","air_temp","gust_kmh","rel_hum","weather","hidden","readOnly","WeatherPage","weatherForField","Main","company","currentPage","pageElement","useEffect","log","LoadDataIntoApp","content","userId","setCompany","setFarms","setFields","requestCompany","setRequestCompany","requestFarms","setRequestFarms","requestFields","setRequestFields","setTimeout","links","self","business_identifier","business_structure","company_type","contact_email","contact_name","created_at","physical_location","number","street","suburb","city","county","state","postcode","country","latitude","longitude","postal_location","state_name","account_number","updated_at","relationships","activities","related","seasons","Math","random","getCompanyForUserID","companyId","987613","company_id","location","reporting_region","987614","987615","987619","getFarmsForCompanyID","987654","application_cost","area","boundary","chemical_cost","contractor_cost","crops","cropping_method","fertilizer_cost","field_group_id","gross_margin","harvested_area","harvested_weight","harvest_date","irrigation","other_cost","other_income","plant_spacing","planting_date","row_spacing","season_id","seed_cost","yield_price","987655","987656","987657","987658","987659","getFieldsForCompanyID","propTypes","PropTypes","string","App","screen","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd38509c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction LoginScreen(props) {\r\n  const { title, setUserId, userName, setUserName, setThumbURL } = props;\r\n  const [plainTextPassword, setPassword] = useState('notSecret');\r\n\r\n  function attemptLogin() {\r\n    fetch('https://randomuser.me/api/?results=1', {\r\n      method: 'GET',\r\n    })\r\n      .then((response) => response.json())\r\n      .then((userJSON) => {\r\n        const randomUserName = userJSON.results[0].name;\r\n        if (!randomUserName) {\r\n          console.error('Error: failed to get randomUserName');\r\n          throw 'Error: failed to get randomUserName';\r\n        }\r\n        if (userName.toLowerCase() === 'example user') {\r\n          setUserName(randomUserName.first + ' ' + randomUserName.last);\r\n        }\r\n        setThumbURL(userJSON.results[0].picture.thumbnail);\r\n        const userID = parseInt(userJSON.results[0].id.value) || 1;\r\n        setUserId(userID);\r\n      })\r\n      .catch(() => console.error('Error: tryToLogIn() failed!'));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"loginBox\">\r\n        <img src=\"https://avatars0.githubusercontent.com/u/6791849?v=4\" className=\"loginIcon\" />\r\n        <header>\r\n          <h1>{title}</h1>\r\n        </header>\r\n        <div>\r\n          <div>\r\n            <label htmlFor=\"userName\">User Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"userName\"\r\n              value={userName}\r\n              onChange={(event) => setUserName(event.target.value)}\r\n              className=\"CredentialsInput\"\r\n              required\r\n            ></input>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={plainTextPassword}\r\n              onChange={(event) => setPassword(event.target.value)}\r\n              className=\"CredentialsInput\"\r\n              required\r\n            ></input>\r\n          </div>\r\n          <button className=\"LoginButton\" onClick={attemptLogin}>{`LOG IN >`}</button>\r\n          <div>\r\n            <a\r\n              className=\"CredentialsInput\"\r\n              href=\"javascript:alert('Password reset is not yet implemented. Please contact Andrew.');\"\r\n            >\r\n              Forgotten your password?\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n// Prop Type Validation:\r\nLoginScreen.propTypes = {\r\n  title: PropTypes.string,\r\n  setUserId: PropTypes.any,\r\n  userName: PropTypes.string,\r\n  setUserName: PropTypes.any,\r\n  setThumbURL: PropTypes.any,\r\n};\r\n\r\nexport default LoginScreen;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TopBar(props) {\r\n  const { title, companyName, thumbURL } = props;\r\n  return (\r\n    <div className=\"TopBarBox\">\r\n      <img src=\"https://avatars0.githubusercontent.com/u/6791849?v=4\" className=\"topBarIcon\" />\r\n      <span className=\"topBarTitle\"> {title} </span>\r\n      <span className=\"topBarCompanyName\"> {companyName} </span>\r\n      <img src={thumbURL} className=\"avatar\" />\r\n      <span className=\"topBarCredit\">By Andrew Greenhill</span>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Prop Type Validation:\r\nTopBar.propTypes = {\r\n  title: PropTypes.string,\r\n  companyName: PropTypes.string,\r\n  thumbURL: PropTypes.string,\r\n};\r\n\r\nexport default TopBar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction MenuBar(props) {\r\n  const { setCurrentPage } = props;\r\n  return (\r\n    <div>\r\n      <button className=\"buttonWeather\" onClick={() => setCurrentPage('weather')}>\r\n        {' '}\r\n        Weather{' '}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Prop Type Validation:\r\nMenuBar.propTypes = {\r\n  setCurrentPage: PropTypes.any,\r\n};\r\n\r\nexport default MenuBar;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction FarmsAndFields(props) {\r\n  const { farms, fields, setWeatherForField } = props;\r\n  const [farmExpanded, setFarmExpanded] = useState({}); // Track which farms are expanded\r\n\r\n  // Create a structure to make it easier & more efficient to use the fields of each farm:\r\n  const farmFields = {};\r\n  Object.keys(farms).forEach((farmId) => {\r\n    farmFields[farmId] = [];\r\n  });\r\n  for (const fieldId in fields) {\r\n    farmFields[fields[fieldId].attributes.farm_id].push(fields[fieldId]);\r\n  }\r\n\r\n  // Create a boolean in farmExpanded for each field.\r\n  // It's a bit tricky to update useState object properties:\r\n  let updateFarmExpanded = false;\r\n  let setFarmExpandedNew = { ...farmExpanded };\r\n  for (const farmId in farms) {\r\n    if (setFarmExpandedNew[farmId] === undefined) {\r\n      setFarmExpandedNew[farmId] = false;\r\n      updateFarmExpanded = true;\r\n    }\r\n  }\r\n  if (updateFarmExpanded) setFarmExpanded({ ...setFarmExpandedNew });\r\n\r\n  // Create a button for each farm, and if the farm is 'expanded' then also list its fields\r\n  const farmsElements = [];\r\n  for (const farmId in farms) {\r\n    farmsElements.push(<div key={farmId}>{farmAndFields(farmId)}</div>);\r\n  }\r\n\r\n  // A function that creates farm and field buttons:\r\n  function farmAndFields(farmId) {\r\n    function toggleFarmExpansion(farmId) {\r\n      let setFarmExpandedNew = { ...farmExpanded };\r\n      setFarmExpandedNew[farmId] = !setFarmExpandedNew[farmId];\r\n      setFarmExpanded({ ...setFarmExpandedNew });\r\n      setWeatherForField();\r\n    }\r\n\r\n    // Farm button\r\n    const farm = (\r\n      <>\r\n        <button onClick={() => toggleFarmExpansion(farmId)}>\r\n          {(farmExpanded[farmId] ? '˅ ' : '˃ ') + farms[farmId].attributes.description}\r\n        </button>\r\n      </>\r\n    );\r\n\r\n    if (!farmExpanded[farmId]) return farm;\r\n\r\n    // Field buttons\r\n    let fieldList = farmFields[farmId].map((field) => {\r\n      return (\r\n        <div key={field.id}>\r\n          <button\r\n            onClick={() => {\r\n              setWeatherForField(field.id);\r\n            }}\r\n          >\r\n            {field.attributes.description}\r\n          </button>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <>\r\n        {farm}\r\n        {fieldList.length > 0 ? <div>{fieldList}</div> : <div>No fields</div>}\r\n      </>\r\n    );\r\n  }\r\n\r\n  return <div>{farmsElements}</div>;\r\n}\r\n\r\n// Prop Type Validation:\r\nFarmsAndFields.propTypes = {\r\n  farms: PropTypes.any,\r\n  fields: PropTypes.any,\r\n  setWeatherForField: PropTypes.any,\r\n};\r\n\r\nexport default FarmsAndFields;\r\n","const ca_proxy = 'https://cors-anywhere-ag.herokuapp.com/';\r\n\r\nexport function weatherStationData(station) {\r\n  // station is expected to be a string like \"IDW60801/IDW60801.95622\"\r\n\r\n  // See http://www.bom.gov.au/catalogue/data-feeds.shtml#obs-ind for stations\r\n  // and http://www.bom.gov.au/fwo/IDW60901/IDW60901.94608.json for example JSON\r\n\r\n  // An alternative approach could be to use www.npmjs.com/package/weather-au-api\r\n\r\n  return fetch(ca_proxy + 'http://www.bom.gov.au/fwo/' + station + '.json', {\r\n    method: 'GET',\r\n    headers: {\r\n      'Cache-Control': 'no-cache',\r\n      'User-Agent': 'andrewgggg',\r\n      Accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\r\n      'Upgrade-Insecure-Requests': '1',\r\n    },\r\n  }).then((response) => response.json());\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nfunction testGettingWeatherData() {\r\n  weatherStationData('IDW60801/IDW60801.95622').then((weatherJSON) => {\r\n    const observation = weatherJSON.observations.data[0];\r\n    console.log(`${observation.name}: ${observation.weather}`);\r\n  });\r\n}\r\n\r\n// testGettingWeatherData();\r\n\r\nexport default weatherStationData;\r\n","export function formatBOMtime(bomTime) {\r\n  return (\r\n    bomTime.slice(0, 4) +\r\n    '-' +\r\n    bomTime.slice(4, 6) +\r\n    '-' +\r\n    bomTime.slice(6, 8) +\r\n    'T' +\r\n    bomTime.slice(8, 10) +\r\n    ':' +\r\n    bomTime.slice(10, 12) +\r\n    ':' +\r\n    bomTime.slice(12, 14)\r\n  );\r\n}\r\n\r\n// Example: formatBOMtime('20210709200000') => \"2021-07-09T20:00:00\"\r\n\r\nexport default formatBOMtime;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport weatherStationData from '../utils/GetWeatherData';\r\nimport formatBOMtime from '../utils/TimeConvert';\r\n\r\nfunction WeatherObservations(props) {\r\n  const { field } = props;\r\n\r\n  const [gotWeatherForStation, setGotWeatherForStation] = useState();\r\n  const [stationName, setStationName] = useState('');\r\n  const [observTime, setObservTime] = useState('');\r\n  const [windSpeed, setWindSpeed] = useState('');\r\n  const [windDirection, setWindDirection] = useState('');\r\n  const [deltaT, setDeltaT] = useState('');\r\n  const [temperature, setTemperature] = useState('');\r\n  const [windGustSpeed, setWindGustSpeed] = useState('');\r\n  const [humidity, setHumidity] = useState('');\r\n  const [weatherConds, setWeatherConds] = useState('');\r\n\r\n  if (gotWeatherForStation !== field.id) {\r\n    // Clear the data\r\n    setStationName('');\r\n    setObservTime('');\r\n    setWindSpeed('');\r\n    setWindDirection('');\r\n    setDeltaT('');\r\n    setTemperature('');\r\n    setWindGustSpeed('');\r\n    setHumidity('');\r\n    setWeatherConds('');\r\n    // Dummy example data:\r\n    // setStationName('Donnybrook');\r\n    // setObservTime('2021-07-08 21:00');\r\n    // setWindSpeed('15 km/h');\r\n    // setWindDirection('NNW');\r\n    // setDeltaT('9 °C');\r\n    // setTemperature('25 °C');\r\n    // setWindGustSpeed('28 km/h');\r\n    // setHumidity('63 %');\r\n    // setWeatherConds('');\r\n    if (field.attributes.weatherStation) {\r\n      // Request data from the weather service\r\n      weatherStationData(field.attributes.weatherStation).then((weatherJSON) => {\r\n        const observation = weatherJSON.observations.data[0];\r\n        setStationName(observation.name);\r\n        setObservTime(new Date(formatBOMtime(observation.local_date_time_full)));\r\n        setWindSpeed(observation.wind_spd_kmh);\r\n        setWindDirection(observation.wind_dir);\r\n        setDeltaT(observation.delta_t);\r\n        setTemperature(observation.air_temp);\r\n        setWindGustSpeed(observation.gust_kmh);\r\n        setHumidity(observation.rel_hum);\r\n        setWeatherConds(observation.weather);\r\n      });\r\n    } else {\r\n      setStationName('Not configured for this field');\r\n    }\r\n    setGotWeatherForStation(field.id);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {field.attributes.description}\r\n      <p></p>\r\n      <div>\r\n        <label htmlFor=\"WeatherStation\" hidden className=\"WeatherFormLabel\">\r\n          Weather Station\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"WeatherStation\"\r\n          readOnly\r\n          value={field.attributes.weatherStation}\r\n          className=\"WeatherFormText\"\r\n          hidden\r\n        ></input>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"StationName\" className=\"WeatherFormLabel\">\r\n          Station Name\r\n        </label>\r\n        <input type=\"text\" name=\"StationName\" readOnly value={stationName} className=\"WeatherFormText\"></input>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"ObservTime\" className=\"WeatherFormLabel\">\r\n          Observation time\r\n        </label>\r\n        <input type=\"text\" name=\"ObservTime\" readOnly value={observTime} className=\"WeatherFormText\"></input>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"WindSpeed\" className=\"WeatherFormLabel\">\r\n          Wind Speed\r\n        </label>\r\n        <input type=\"text\" name=\"WindSpeed\" readOnly value={windSpeed} className=\"WeatherFormText\"></input>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"WindDirection\" className=\"WeatherFormLabel\">\r\n          Wind Direction\r\n        </label>\r\n        <input type=\"text\" name=\"WindDirection\" readOnly value={windDirection} className=\"WeatherFormText\"></input>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"DeltaT\" className=\"WeatherFormLabel\">\r\n          Delta T\r\n        </label>\r\n        <input type=\"text\" name=\"DeltaT\" readOnly value={deltaT} className=\"WeatherFormText\"></input>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"Temperature\" className=\"WeatherFormLabel\">\r\n          Temperature\r\n        </label>\r\n        <input type=\"text\" name=\"Temperature\" readOnly value={temperature} className=\"WeatherFormText\"></input>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"WindGustSpeed\" className=\"WeatherFormLabel\">\r\n          Wind Gust Speed\r\n        </label>\r\n        <input type=\"text\" name=\"WindGustSpeed\" readOnly value={windGustSpeed} className=\"WeatherFormText\"></input>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"Humidity\" className=\"WeatherFormLabel\">\r\n          Humidity\r\n        </label>\r\n        <input type=\"text\" name=\"Humidity\" readOnly value={humidity} className=\"WeatherFormText\"></input>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"WeatherConditions\" className=\"WeatherFormLabel\">\r\n          Weather Conditions\r\n        </label>\r\n        <input type=\"text\" name=\"WeatherConditions\" readOnly value={weatherConds} className=\"WeatherFormText\"></input>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n// Prop Type Validation:\r\nWeatherObservations.propTypes = {\r\n  field: PropTypes.any,\r\n};\r\n\r\nexport default WeatherObservations;\r\n","import React, { useState } from 'react';\r\nimport FarmsAndFields from '../components/FarmsAndFields';\r\nimport WeatherObservations from '../components/WeatherObservations';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction WeatherPage(props) {\r\n  const { farms, fields, setCurrentPage, companyName } = props;\r\n  const [weatherForField, setWeatherForField] = useState();\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <span className=\"GetWeatherData\">Get Weather Data</span>\r\n        <button className=\"GetWeatherDataX\" onClick={() => setCurrentPage('')}>\r\n          X\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <span className=\"WeatherFarmsFields\">\r\n          <span>{companyName}</span>\r\n          <p></p>\r\n          <FarmsAndFields farms={farms} fields={fields} setWeatherForField={setWeatherForField} />\r\n        </span>\r\n        <span className=\"WeatherObservation\">\r\n          <div>Weather Observation</div>\r\n          {weatherForField ? <WeatherObservations field={fields[weatherForField]} /> : ''}\r\n        </span>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n// Prop Type Validation:\r\nWeatherPage.propTypes = {\r\n  farms: PropTypes.any,\r\n  fields: PropTypes.any,\r\n  setCurrentPage: PropTypes.any,\r\n  companyName: PropTypes.string,\r\n};\r\n\r\nexport default WeatherPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TopBar from '../components/TopBar';\r\nimport MenuBar from '../components/MenuBar';\r\nimport WeatherPage from './WeatherPage';\r\n\r\nfunction Main(props) {\r\n  const { title, userName, thumbURL, company, farms, fields } = props;\r\n  const companyName = company.attributes.name;\r\n  const [currentPage, setCurrentPage] = useState('');\r\n  let pageElement = <></>;\r\n\r\n  useEffect(() => console.log(userName), [userName]);\r\n\r\n  if (currentPage === 'weather') {\r\n    pageElement = (\r\n      <WeatherPage farms={farms} fields={fields} setCurrentPage={setCurrentPage} companyName={companyName} />\r\n    );\r\n  } else {\r\n    pageElement = <></>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <TopBar title={title} companyName={companyName} thumbURL={thumbURL} />\r\n      <MenuBar setCurrentPage={setCurrentPage} />\r\n      {pageElement}\r\n    </div>\r\n  );\r\n}\r\n\r\nMain.propTypes = {\r\n  title: PropTypes.string,\r\n  userName: PropTypes.string,\r\n  thumbURL: PropTypes.string,\r\n  company: PropTypes.any,\r\n  farms: PropTypes.any,\r\n  fields: PropTypes.any,\r\n};\r\n\r\nexport default Main;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { getCompanyForUserID, getFarmsForCompanyID, getFieldsForCompanyID } from '../utils/GetAgworldData';\r\nimport TopBar from '../components/TopBar';\r\nimport Main from './Main';\r\n\r\nfunction LoadDataIntoApp(props) {\r\n  const { title, userId, userName, thumbURL } = props;\r\n\r\n  const [company, setCompany] = useState();\r\n  const [farms, setFarms] = useState();\r\n  const [fields, setFields] = useState();\r\n  const [requestCompany, setRequestCompany] = useState(true);\r\n  const [requestFarms, setRequestFarms] = useState(true);\r\n  const [requestFields, setRequestFields] = useState(true);\r\n\r\n  if (requestCompany && userId) {\r\n    getCompanyForUserID(userId, setCompany);\r\n    setRequestCompany(false);\r\n  }\r\n\r\n  if (requestFarms && company) {\r\n    getFarmsForCompanyID(company.id, setFarms);\r\n    setRequestFarms(false);\r\n  }\r\n\r\n  if (requestFields && company) {\r\n    getFieldsForCompanyID(company.id, setFields);\r\n    setRequestFields(false);\r\n  }\r\n\r\n  let content;\r\n\r\n  if (company && farms && fields) {\r\n    content = (\r\n      <Main title={title} userName={userName} thumbURL={thumbURL} company={company} farms={farms} fields={fields} />\r\n    );\r\n  } else {\r\n    content = (\r\n      <>\r\n        <TopBar title={title} companyName=\"\" thumbURL={thumbURL} />\r\n        <div className=\"Loading\">Loading...</div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return <>{content}</>;\r\n}\r\n\r\nLoadDataIntoApp.propTypes = {\r\n  title: PropTypes.string,\r\n  userId: PropTypes.number,\r\n  userName: PropTypes.string,\r\n  thumbURL: PropTypes.string,\r\n};\r\n\r\nexport default LoadDataIntoApp;\r\n","/* eslint-disable no-unused-vars */\r\n// The data here is from https://us.agworld.co/user_api/v1/docs => Simulated Response, with some copy+paste+modifications\r\n\r\nexport function getCompanyForUserID(userId, setCompany) {\r\n  setTimeout((userId) => {\r\n    // console.log(`This is a stub for getting Company data. It ignored the userID (${userId})`);\r\n    setCompany({\r\n      id: '987124',\r\n      type: 'companies',\r\n      links: { self: 'http://example.org/user_api/v1/companies/987124' },\r\n      attributes: {\r\n        business_identifier: '124',\r\n        business_structure: null,\r\n        company_type: 'Farmer',\r\n        contact_email: 'farmer.jim@farmingproductions.com',\r\n        contact_name: 'Farmer Jim',\r\n        created_at: '2011-06-15T10:30:00.000+08:00',\r\n        description: null,\r\n        name: 'Farming Productions',\r\n        physical_location: {\r\n          number: null,\r\n          street: null,\r\n          suburb: null,\r\n          city: null,\r\n          county: null,\r\n          state: null,\r\n          postcode: null,\r\n          country: 'Australia',\r\n          latitude: -29.0779350143255,\r\n          longitude: 133.664062768221,\r\n        },\r\n        postal_location: {\r\n          number: null,\r\n          street: null,\r\n          suburb: null,\r\n          city: null,\r\n          county: null,\r\n          state: null,\r\n          postcode: null,\r\n          country: null,\r\n          latitude: null,\r\n          longitude: null,\r\n        },\r\n        state_name: null,\r\n        account_number: '12345678',\r\n        updated_at: '2011-06-15T10:30:00.000+08:00',\r\n      },\r\n      relationships: {\r\n        activities: {\r\n          links: {\r\n            self: 'http://example.org/user_api/v1/companies/987124/relationships/activities',\r\n            related: 'http://example.org/user_api/v1/companies/987124/activities',\r\n          },\r\n        },\r\n        farms: {\r\n          links: {\r\n            self: 'http://example.org/user_api/v1/companies/987124/relationships/farms',\r\n            related: 'http://example.org/user_api/v1/companies/987124/farms',\r\n          },\r\n        },\r\n        seasons: {\r\n          links: {\r\n            self: 'http://example.org/user_api/v1/companies/987124/relationships/seasons',\r\n            related: 'http://example.org/user_api/v1/companies/987124/seasons',\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }, 100 + 500 * Math.random());\r\n}\r\n\r\nexport function getFarmsForCompanyID(companyId, setFarms) {\r\n  setTimeout((companyId) => {\r\n    // console.log(`This is a stub for getting Farms data. It ignored the companyID (${companyId})`);\r\n    setFarms({\r\n      987613: {\r\n        id: '987613',\r\n        type: 'farms',\r\n        links: { self: 'http://example.org/user_api/v1/farms/987613' },\r\n        attributes: {\r\n          company_id: 987124,\r\n          created_at: '2011-06-15T10:30:00.000+08:00',\r\n          description: 'Home Farm',\r\n          location: {\r\n            number: null,\r\n            street: null,\r\n            suburb: null,\r\n            city: null,\r\n            county: null,\r\n            state: 'Western Australia',\r\n            postcode: null,\r\n            country: 'Australia',\r\n            latitude: -29.0779350143255,\r\n            longitude: 133.665562768221,\r\n          },\r\n          name: 'Farm 1',\r\n          reporting_region: 'Farm 1',\r\n          updated_at: '2011-06-15T10:30:00.000+08:00',\r\n        },\r\n        relationships: {\r\n          company: {\r\n            links: {\r\n              self: 'http://example.org/user_api/v1/farms/987613/relationships/company',\r\n              related: 'http://example.org/user_api/v1/farms/987613/company',\r\n            },\r\n          },\r\n          fields: {\r\n            links: {\r\n              self: 'http://example.org/user_api/v1/farms/987613/relationships/fields',\r\n              related: 'http://example.org/user_api/v1/farms/987613/fields',\r\n            },\r\n          },\r\n        },\r\n      },\r\n      987614: {\r\n        id: '987614',\r\n        type: 'farms',\r\n        links: { self: 'http://example.org/user_api/v1/farms/987614' },\r\n        attributes: {\r\n          company_id: 987124,\r\n          created_at: '2011-06-15T10:30:00.000+08:00',\r\n          description: 'Orchard',\r\n          location: {\r\n            number: null,\r\n            street: null,\r\n            suburb: null,\r\n            city: null,\r\n            county: null,\r\n            state: 'Western Australia',\r\n            postcode: null,\r\n            country: 'Australia',\r\n            latitude: -29.0779350143255,\r\n            longitude: 133.665562768221,\r\n          },\r\n          name: 'Farm 1',\r\n          reporting_region: 'Farm 1',\r\n          updated_at: '2011-06-15T10:30:00.000+08:00',\r\n        },\r\n        relationships: {\r\n          company: {\r\n            links: {\r\n              self: 'http://example.org/user_api/v1/farms/987614/relationships/company',\r\n              related: 'http://example.org/user_api/v1/farms/987614/company',\r\n            },\r\n          },\r\n          fields: {\r\n            links: {\r\n              self: 'http://example.org/user_api/v1/farms/987614/relationships/fields',\r\n              related: 'http://example.org/user_api/v1/farms/987614/fields',\r\n            },\r\n          },\r\n        },\r\n      },\r\n      987615: {\r\n        id: '987615',\r\n        type: 'farms',\r\n        links: { self: 'http://example.org/user_api/v1/farms/987615' },\r\n        attributes: {\r\n          company_id: 987124,\r\n          created_at: '2011-06-15T10:30:00.000+08:00',\r\n          description: 'Vineyard',\r\n          location: {\r\n            number: null,\r\n            street: null,\r\n            suburb: null,\r\n            city: null,\r\n            county: null,\r\n            state: 'Western Australia',\r\n            postcode: null,\r\n            country: 'Australia',\r\n            latitude: -29.0779350143255,\r\n            longitude: 133.665562768221,\r\n          },\r\n          name: 'Farm 1',\r\n          reporting_region: 'Farm 1',\r\n          updated_at: '2011-06-15T10:30:00.000+08:00',\r\n        },\r\n        relationships: {\r\n          company: {\r\n            links: {\r\n              self: 'http://example.org/user_api/v1/farms/987615/relationships/company',\r\n              related: 'http://example.org/user_api/v1/farms/987615/company',\r\n            },\r\n          },\r\n          fields: {\r\n            links: {\r\n              self: 'http://example.org/user_api/v1/farms/987615/relationships/fields',\r\n              related: 'http://example.org/user_api/v1/farms/987615/fields',\r\n            },\r\n          },\r\n        },\r\n      },\r\n      987619: {\r\n        id: '987619',\r\n        type: 'farms',\r\n        links: { self: 'http://example.org/user_api/v1/farms/987619' },\r\n        attributes: {\r\n          company_id: 987124,\r\n          created_at: '2011-06-15T10:30:00.000+08:00',\r\n          description: 'Pasture',\r\n          location: {\r\n            number: null,\r\n            street: null,\r\n            suburb: null,\r\n            city: null,\r\n            county: null,\r\n            state: 'Western Australia',\r\n            postcode: null,\r\n            country: 'Australia',\r\n            latitude: -29.0779350143255,\r\n            longitude: 133.665562768221,\r\n          },\r\n          name: 'Farm 1',\r\n          reporting_region: 'Farm 1',\r\n          updated_at: '2011-06-15T10:30:00.000+08:00',\r\n        },\r\n        relationships: {\r\n          company: {\r\n            links: {\r\n              self: 'http://example.org/user_api/v1/farms/987619/relationships/company',\r\n              related: 'http://example.org/user_api/v1/farms/987619/company',\r\n            },\r\n          },\r\n          fields: {\r\n            links: {\r\n              self: 'http://example.org/user_api/v1/farms/987619/relationships/fields',\r\n              related: 'http://example.org/user_api/v1/farms/987619/fields',\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }, 200 + 800 * Math.random());\r\n}\r\n\r\nexport function getFieldsForCompanyID(companyId, setFields) {\r\n  setTimeout((companyId) => {\r\n    // console.log(`This is a stub for getting Fields data. It ignored the companyID (${companyId})`);\r\n    // This would find all farms with companyId, then find their fields\r\n    setFields({\r\n      987654: {\r\n        id: '987654',\r\n        type: 'fields',\r\n        links: { self: 'http://example.org/user_api/v1/fields/987654' },\r\n        attributes: {\r\n          application_cost: null,\r\n          area: null,\r\n          boundary: null,\r\n          chemical_cost: null,\r\n          contractor_cost: null,\r\n          created_at: '2011-06-15T10:30:00.000+08:00',\r\n          crops: null,\r\n          cropping_method: 'dryland',\r\n          description: 'Potatoes',\r\n          farm_id: 987613,\r\n          fertilizer_cost: null,\r\n          field_group_id: 987613,\r\n          gross_margin: null,\r\n          harvested_area: null,\r\n          harvested_weight: null,\r\n          harvest_date: null,\r\n          irrigation: 'Pivot',\r\n          name: 'Field 1',\r\n          other_cost: null,\r\n          other_income: null,\r\n          plant_spacing: '15 cm',\r\n          planting_date: null,\r\n          row_spacing: '20 cm',\r\n          season_id: null,\r\n          seed_cost: null,\r\n          updated_at: '2011-06-15T10:30:00.000+08:00',\r\n          weatherStation: 'IDW60801/IDW60801.95632',\r\n          yield_price: null,\r\n        },\r\n        relationships: {\r\n          farm: {\r\n            links: {\r\n              self: 'http://example.org/user_api/v1/fields/987654/relationships/farm',\r\n              related: 'http://example.org/user_api/v1/fields/987654/farm',\r\n            },\r\n          },\r\n        },\r\n      },\r\n      987655: {\r\n        id: '987655',\r\n        type: 'fields',\r\n        links: { self: 'http://example.org/user_api/v1/fields/987655' },\r\n        attributes: {\r\n          application_cost: null,\r\n          area: null,\r\n          boundary: null,\r\n          chemical_cost: null,\r\n          contractor_cost: null,\r\n          created_at: '2011-06-15T10:30:00.000+08:00',\r\n          crops: null,\r\n          cropping_method: 'dryland',\r\n          description: 'Tomatoes',\r\n          farm_id: 987613,\r\n          fertilizer_cost: null,\r\n          field_group_id: 987613,\r\n          gross_margin: null,\r\n          harvested_area: null,\r\n          harvested_weight: null,\r\n          harvest_date: null,\r\n          irrigation: 'Pivot',\r\n          name: 'Field 1',\r\n          other_cost: null,\r\n          other_income: null,\r\n          plant_spacing: '15 cm',\r\n          planting_date: null,\r\n          row_spacing: '20 cm',\r\n          season_id: null,\r\n          seed_cost: null,\r\n          updated_at: '2011-06-15T10:30:00.000+08:00',\r\n          weatherStation: '',\r\n          yield_price: null,\r\n        },\r\n        relationships: {\r\n          farm: {\r\n            links: {\r\n              self: 'http://example.org/user_api/v1/fields/987655/relationships/farm',\r\n              related: 'http://example.org/user_api/v1/fields/987655/farm',\r\n            },\r\n          },\r\n        },\r\n      },\r\n      987656: {\r\n        id: '987656',\r\n        type: 'fields',\r\n        links: { self: 'http://example.org/user_api/v1/fields/987656' },\r\n        attributes: {\r\n          application_cost: null,\r\n          area: null,\r\n          boundary: null,\r\n          chemical_cost: null,\r\n          contractor_cost: null,\r\n          created_at: '2011-06-15T10:30:00.000+08:00',\r\n          crops: null,\r\n          cropping_method: 'dryland',\r\n          description: 'Avocados',\r\n          farm_id: 987614,\r\n          fertilizer_cost: null,\r\n          field_group_id: 987613,\r\n          gross_margin: null,\r\n          harvested_area: null,\r\n          harvested_weight: null,\r\n          harvest_date: null,\r\n          irrigation: 'Pivot',\r\n          name: 'Field 1',\r\n          other_cost: null,\r\n          other_income: null,\r\n          plant_spacing: '15 cm',\r\n          planting_date: null,\r\n          row_spacing: '20 cm',\r\n          season_id: null,\r\n          seed_cost: null,\r\n          updated_at: '2011-06-15T10:30:00.000+08:00',\r\n          weatherStation: 'IDW60801/IDW60801.95611',\r\n          yield_price: null,\r\n        },\r\n        relationships: {\r\n          farm: {\r\n            links: {\r\n              self: 'http://example.org/user_api/v1/fields/987656/relationships/farm',\r\n              related: 'http://example.org/user_api/v1/fields/987656/farm',\r\n            },\r\n          },\r\n        },\r\n      },\r\n      987657: {\r\n        id: '987657',\r\n        type: 'fields',\r\n        links: { self: 'http://example.org/user_api/v1/fields/987657' },\r\n        attributes: {\r\n          application_cost: null,\r\n          area: null,\r\n          boundary: null,\r\n          chemical_cost: null,\r\n          contractor_cost: null,\r\n          created_at: '2011-06-15T10:30:00.000+08:00',\r\n          crops: null,\r\n          cropping_method: 'dryland',\r\n          description: 'Oranges',\r\n          farm_id: 987614,\r\n          fertilizer_cost: null,\r\n          field_group_id: 987613,\r\n          gross_margin: null,\r\n          harvested_area: null,\r\n          harvested_weight: null,\r\n          harvest_date: null,\r\n          irrigation: 'Pivot',\r\n          name: 'Field 1',\r\n          other_cost: null,\r\n          other_income: null,\r\n          plant_spacing: '15 cm',\r\n          planting_date: null,\r\n          row_spacing: '20 cm',\r\n          season_id: null,\r\n          seed_cost: null,\r\n          updated_at: '2011-06-15T10:30:00.000+08:00',\r\n          weatherStation: 'IDW60801/IDW60801.95621',\r\n          yield_price: null,\r\n        },\r\n        relationships: {\r\n          farm: {\r\n            links: {\r\n              self: 'http://example.org/user_api/v1/fields/987657/relationships/farm',\r\n              related: 'http://example.org/user_api/v1/fields/987657/farm',\r\n            },\r\n          },\r\n        },\r\n      },\r\n      987658: {\r\n        id: '987658',\r\n        type: 'fields',\r\n        links: { self: 'http://example.org/user_api/v1/fields/987658' },\r\n        attributes: {\r\n          application_cost: null,\r\n          area: null,\r\n          boundary: null,\r\n          chemical_cost: null,\r\n          contractor_cost: null,\r\n          created_at: '2011-06-15T10:30:00.000+08:00',\r\n          crops: null,\r\n          cropping_method: 'dryland',\r\n          description: 'Olives',\r\n          farm_id: 987614,\r\n          fertilizer_cost: null,\r\n          field_group_id: 987613,\r\n          gross_margin: null,\r\n          harvested_area: null,\r\n          harvested_weight: null,\r\n          harvest_date: null,\r\n          irrigation: 'Pivot',\r\n          name: 'Field 1',\r\n          other_cost: null,\r\n          other_income: null,\r\n          plant_spacing: '15 cm',\r\n          planting_date: null,\r\n          row_spacing: '20 cm',\r\n          season_id: null,\r\n          seed_cost: null,\r\n          updated_at: '2011-06-15T10:30:00.000+08:00',\r\n          weatherStation: 'IDW60801/IDW60801.95641',\r\n          yield_price: null,\r\n        },\r\n        relationships: {\r\n          farm: {\r\n            links: {\r\n              self: 'http://example.org/user_api/v1/fields/987658/relationships/farm',\r\n              related: 'http://example.org/user_api/v1/fields/987658/farm',\r\n            },\r\n          },\r\n        },\r\n      },\r\n      987659: {\r\n        id: '987659',\r\n        type: 'fields',\r\n        links: { self: 'http://example.org/user_api/v1/fields/987659' },\r\n        attributes: {\r\n          application_cost: null,\r\n          area: null,\r\n          boundary: null,\r\n          chemical_cost: null,\r\n          contractor_cost: null,\r\n          created_at: '2011-06-15T10:30:00.000+08:00',\r\n          crops: null,\r\n          cropping_method: 'dryland',\r\n          description: 'Sauvignon Blanc',\r\n          farm_id: 987615,\r\n          fertilizer_cost: null,\r\n          field_group_id: 987613,\r\n          gross_margin: null,\r\n          harvested_area: null,\r\n          harvested_weight: null,\r\n          harvest_date: null,\r\n          irrigation: 'Pivot',\r\n          name: 'Field 1',\r\n          other_cost: null,\r\n          other_income: null,\r\n          plant_spacing: '15 cm',\r\n          planting_date: null,\r\n          row_spacing: '20 cm',\r\n          season_id: null,\r\n          seed_cost: null,\r\n          updated_at: '2011-06-15T10:30:00.000+08:00',\r\n          weatherStation: 'IDW60801/IDW60801.95641',\r\n          yield_price: null,\r\n        },\r\n        relationships: {\r\n          farm: {\r\n            links: {\r\n              self: 'http://example.org/user_api/v1/fields/987659/relationships/farm',\r\n              related: 'http://example.org/user_api/v1/fields/987659/farm',\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }, 200 + 800 * Math.random());\r\n}\r\n","import React, { useState } from 'react';\r\nimport LoginScreen from './views/LoginScreen';\r\nimport LoadDataIntoApp from './views/LoadDataIntoApp';\r\nimport './assets/App.css';\r\n\r\nfunction App() {\r\n  const operational = true;\r\n  const title = `Agworld Accessory`;\r\n  const [userId, setUserId] = useState();\r\n  const [userName, setUserName] = useState('Example User');\r\n  const [thumbURL, setThumbURL] = useState('Example User');\r\n  let screen;\r\n\r\n  if (!operational) {\r\n    screen = (\r\n      <div>\r\n        <p>This site is currently unavailable.</p>\r\n        <p>Please try again later.</p>\r\n      </div>\r\n    );\r\n  } else {\r\n    if (!userId) {\r\n      screen = (\r\n        <LoginScreen\r\n          title={title}\r\n          setUserId={setUserId}\r\n          userName={userName}\r\n          setUserName={setUserName}\r\n          setThumbURL={setThumbURL}\r\n        />\r\n      );\r\n    } else {\r\n      screen = <LoadDataIntoApp title={title} userId={userId} userName={userName} thumbURL={thumbURL} />;\r\n    }\r\n  }\r\n\r\n  return <div className=\"App\">{screen}</div>;\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './utils/reportWebVitals';\r\nimport App from './App';\r\n// import './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}